# routers/analytics_router.py

import json
from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.orm import Session
from sqlalchemy import create_engine
from sqlalchemy.exc import SQLAlchemyError
from celery.result import AsyncResult
from tasks import (
    generate_dataframe_report,
    quick_dataframe_analysis,
    comprehensive_dataframe_analysis,
    generate_advanced_report  # Legacy
)
from celery_worker import celery_app
import crud
import schemas
import models
import auth
import database
from typing import Optional, List
import logging

logger = logging.getLogger(__name__)

router = APIRouter(
    prefix="/analytics",
    tags=["SmartGPT DataFrame Analytics"],
    dependencies=[Depends(auth.get_current_active_user)]
)


# =============== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–î ===============

@router.post("/connections/", response_model=schemas.DatabaseConnectionInfo)
def add_database_connection(
        conn_details: schemas.DatabaseConnectionCreate,
        db: Session = Depends(database.get_db),
        current_user: models.User = Depends(auth.get_current_active_user)
):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π SmartGPT —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        engine = create_engine(conn_details.connection_string, connect_args={'connect_timeout': 10})

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        with engine.connect() as conn:
            from sqlalchemy import inspect, text
            inspector = inspect(engine)
            tables = inspector.get_table_names()

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏ SmartGPT –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞
            total_rows = 0
            for table in tables[:5]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ç–∞–±–ª–∏—Ü
                try:
                    count = conn.execute(text(f"SELECT COUNT(*) FROM {table}")).scalar()
                    total_rows += count or 0
                except:
                    continue

            logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {len(tables)} —Ç–∞–±–ª–∏—Ü, ~{total_rows} –∑–∞–ø–∏—Å–µ–π")

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
        db_conn = crud.create_db_connection(db, user_id=current_user.id, conn_details=conn_details)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user.id} –¥–æ–±–∞–≤–∏–ª SmartGPT-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ {db_conn.id}")

        return db_conn

    except SQLAlchemyError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –¥–ª—è SmartGPT: {e}")
        raise HTTPException(status_code=400, detail=f"–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")


@router.get("/connections/", response_model=List[schemas.DatabaseConnectionInfo])
def get_user_connections(
        db: Session = Depends(database.get_db),
        current_user: models.User = Depends(auth.get_current_active_user)
):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    connections = crud.get_db_connections_by_user(db, user_id=current_user.id)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {len(connections)} –Ω–∞–π–¥–µ–Ω–æ")
    return connections


# =============== –û–°–ù–û–í–ù–û–ô SMARTGPT DATAFRAME –ê–ù–ê–õ–ò–ó ===============

@router.post("/reports/generate/{connection_id}", response_model=schemas.ReportInfo)
def generate_smart_analytics_report(
        connection_id: int,
        max_questions: Optional[int] = 15,
        analysis_type: Optional[str] = "standard",
        enable_gpt: Optional[bool] = True,
        db: Session = Depends(database.get_db),
        current_user: models.User = Depends(auth.get_current_active_user)
):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω—ã–π –æ—Ç—á–µ—Ç —Å SmartGPT –∞–Ω–∞–ª–∏–∑–æ–º

    Args:
        connection_id: ID –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
        max_questions: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (8-25)
        analysis_type: –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞ - quick, standard, comprehensive
        enable_gpt: –í–∫–ª—é—á–∏—Ç—å GPT –∞–Ω–∞–ª–∏–∑ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    db_conn = crud.get_db_connection_by_id(db, connection_id, user_id=current_user.id)
    if not db_conn:
        raise HTTPException(status_code=404, detail="–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if analysis_type not in ["quick", "standard", "comprehensive"]:
        analysis_type = "standard"

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    question_limits = {"quick": 8, "standard": 15, "comprehensive": 25}
    max_allowed = question_limits.get(analysis_type, 15)
    max_questions = min(max_questions or max_allowed, max_allowed)

    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ—Ç—á–µ—Ç–∞
    report_record = crud.create_report(
        db=db,
        user_id=current_user.id,
        connection_id=connection_id
    )

    # –í—ã–±–∏—Ä–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É
    if analysis_type == "quick":
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ SmartGPT –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.id}")
        task = quick_dataframe_analysis.delay(connection_id, current_user.id, report_record.id)
    elif analysis_type == "comprehensive":
        logger.info(f"üß† –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ SmartGPT –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.id}")
        task = comprehensive_dataframe_analysis.delay(connection_id, current_user.id, report_record.id)
    else:  # standard
        logger.info(f"‚ö° –ó–∞–ø—É—Å–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ SmartGPT –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.id}")
        task = generate_dataframe_report.delay(connection_id, current_user.id, report_record.id, max_questions)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å task_id
    report_record.task_id = task.id
    db.commit()
    db.refresh(report_record)

    logger.info(f"SmartGPT –æ—Ç—á–µ—Ç {report_record.id} —Å–æ–∑–¥–∞–Ω —Å task_id: {task.id}")
    return report_record


@router.post("/reports/smart-analysis/{connection_id}", response_model=schemas.ReportInfo)
def generate_smart_analysis_v2(
        connection_id: int,
        custom_questions: Optional[List[str]] = None,
        business_context: Optional[str] = None,
        priority_focus: Optional[str] = "business_insights",
        db: Session = Depends(database.get_db),
        current_user: models.User = Depends(auth.get_current_active_user)
):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π SmartGPT –∞–Ω–∞–ª–∏–∑ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""

    db_conn = crud.get_db_connection_by_id(db, connection_id, user_id=current_user.id)
    if not db_conn:
        raise HTTPException(status_code=404, detail="–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    report_record = crud.create_report(
        db=db,
        user_id=current_user.id,
        connection_id=connection_id
    )

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
    max_questions = len(custom_questions) if custom_questions else 15
    max_questions = min(max_questions, 30)  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ

    logger.info(f"üéØ –ó–∞–ø—É—Å–∫ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ SmartGPT –∞–Ω–∞–ª–∏–∑–∞: {max_questions} –≤–æ–ø—Ä–æ—Å–æ–≤, —Ñ–æ–∫—É—Å: {priority_focus}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (—á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∑–∞–¥–∞—á—É)
    task = generate_dataframe_report.delay(connection_id, current_user.id, report_record.id, max_questions)

    report_record.task_id = task.id
    db.commit()
    db.refresh(report_record)

    return report_record


# =============== –°–¢–ê–¢–£–° –ò –ü–û–õ–£–ß–ï–ù–ò–ï –û–¢–ß–ï–¢–û–í ===============

@router.get("/reports/task/{task_id}/status")
def get_analysis_task_status(task_id: str):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ SmartGPT –∞–Ω–∞–ª–∏–∑–∞."""
    task_result = AsyncResult(task_id, app=celery_app)

    response = {
        "task_id": task_id,
        "status": task_result.status,
        "info": task_result.info
    }

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    if task_result.info and isinstance(task_result.info, dict):
        response.update({
            "progress": task_result.info.get("progress", "–û–±—Ä–∞–±–æ—Ç–∫–∞..."),
            "stage": task_result.info.get("stage", "unknown"),
            "progress_percentage": task_result.info.get("progress_percentage", 0),
            "method": task_result.info.get("method", "dataframe_with_gpt"),
            "analysis_type": task_result.info.get("analysis_type", "standard"),
            "smartgpt_enabled": True
        })

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
        if task_result.info.get("error"):
            response["error"] = task_result.info["error"]

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if task_result.status == "SUCCESS":
            response.update({
                "report_id": task_result.info.get("report_id"),
                "questions_processed": task_result.info.get("questions_processed", 0),
                "successful_analyses": task_result.info.get("successful_analyses", 0),
                "gpt_analyses": task_result.info.get("gpt_analyses", 0),
                "tables_loaded": task_result.info.get("tables_loaded", 0)
            })

    logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω —Å—Ç–∞—Ç—É—Å SmartGPT –∑–∞–¥–∞—á–∏ {task_id}: {task_result.status}")
    return response


@router.get("/reports/list/", response_model=List[schemas.ReportInfo])
def get_user_reports(
        limit: Optional[int] = 10,
        offset: Optional[int] = 0,
        status_filter: Optional[str] = None,
        method_filter: Optional[str] = None,
        db: Session = Depends(database.get_db),
        current_user: models.User = Depends(auth.get_current_active_user)
):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π."""
    reports = crud.get_user_reports(
        db,
        user_id=current_user.id,
        limit=limit,
        offset=offset,
        status_filter=status_filter
    )

    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –º–µ—Ç–æ–¥—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if method_filter:
        filtered_reports = []
        for report in reports:
            if report.results and isinstance(report.results, dict):
                method = report.results.get("method", "")
                if method_filter.lower() in method.lower():
                    filtered_reports.append(report)
        reports = filtered_reports

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤: {len(reports)} –Ω–∞–π–¥–µ–Ω–æ")
    return reports


@router.get("/reports/{report_id}", response_model=schemas.Report)
def get_smart_report_by_id(
        report_id: int,
        db: Session = Depends(database.get_db),
        current_user: models.User = Depends(auth.get_current_active_user)
):
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π SmartGPT –æ—Ç—á–µ—Ç –ø–æ ID."""
    report = crud.get_report_by_id(db, report_id=report_id, user_id=current_user.id)

    if not report:
        raise HTTPException(status_code=404, detail="–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user.id} –ø–æ–ª—É—á–∏–ª SmartGPT –æ—Ç—á–µ—Ç {report_id}")

    # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç results
    if isinstance(report.results, str):
        try:
            report.results = json.loads(report.results)
        except json.JSONDecodeError:
            report.results = {"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."}

    return report


# =============== –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ê–ù–ê–õ–ò–ó–´ ===============

@router.post("/quick-analysis/{connection_id}", response_model=schemas.ReportInfo)
def run_quick_smart_analysis(
        connection_id: int,
        db: Session = Depends(database.get_db),
        current_user: models.User = Depends(auth.get_current_active_user)
):
    """–ë—ã—Å—Ç—Ä—ã–π SmartGPT –∞–Ω–∞–ª–∏–∑ (8 –∫–ª—é—á–µ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, ~10 –º–∏–Ω—É—Ç)"""

    db_conn = crud.get_db_connection_by_id(db, connection_id, user_id=current_user.id)
    if not db_conn:
        raise HTTPException(status_code=404, detail="–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    report_record = crud.create_report(
        db=db,
        user_id=current_user.id,
        connection_id=connection_id
    )

    logger.info(f"‚ö° –ë—ã—Å—Ç—Ä—ã–π SmartGPT –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.id}")
    task = quick_dataframe_analysis.delay(connection_id, current_user.id, report_record.id)

    report_record.task_id = task.id
    db.commit()
    db.refresh(report_record)

    return report_record


@router.post("/comprehensive-analysis/{connection_id}", response_model=schemas.ReportInfo)
def run_comprehensive_smart_analysis(
        connection_id: int,
        include_predictive: Optional[bool] = True,
        deep_correlation_analysis: Optional[bool] = True,
        db: Session = Depends(database.get_db),
        current_user: models.User = Depends(auth.get_current_active_user)
):
    """–ì–ª—É–±–æ–∫–∏–π SmartGPT –∞–Ω–∞–ª–∏–∑ (25 –≤–æ–ø—Ä–æ—Å–æ–≤, –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, ~45 –º–∏–Ω—É—Ç)"""

    db_conn = crud.get_db_connection_by_id(db, connection_id, user_id=current_user.id)
    if not db_conn:
        raise HTTPException(status_code=404, detail="–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    report_record = crud.create_report(
        db=db,
        user_id=current_user.id,
        connection_id=connection_id
    )

    logger.info(f"üß† –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π SmartGPT –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.id}")
    task = comprehensive_dataframe_analysis.delay(connection_id, current_user.id, report_record.id)

    report_record.task_id = task.id
    db.commit()
    db.refresh(report_record)

    return report_record


# =============== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò –ú–û–ù–ò–¢–û–†–ò–ù–ì ===============

@router.get("/connection-health/{connection_id}")
def check_connection_health(
        connection_id: int,
        db: Session = Depends(database.get_db),
        current_user: models.User = Depends(auth.get_current_active_user)
):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫ SmartGPT –∞–Ω–∞–ª–∏–∑—É."""

    db_conn = crud.get_db_connection_by_id(db, connection_id, user_id=current_user.id)
    if not db_conn:
        raise HTTPException(status_code=404, detail="–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    try:
        connection_string = crud.get_decrypted_connection_string(db, connection_id, current_user.id)
        engine = create_engine(connection_string, connect_args={'connect_timeout': 10})

        with engine.connect() as conn:
            from sqlalchemy import inspect, text
            inspector = inspect(engine)

            tables = [t for t in inspector.get_table_names() if t not in ['alembic_version', 'django_migrations']]

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ SmartGPT
            smartgpt_readiness = 0
            total_rows = 0
            business_ready_tables = 0

            for table in tables[:10]:  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ 10 —Ç–∞–±–ª–∏—Ü
                try:
                    count = conn.execute(text(f"SELECT COUNT(*) FROM {table}")).scalar() or 0
                    total_rows += count

                    if count > 0:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∏–∑–Ω–µ—Å-–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º –∫–æ–ª–æ–Ω–æ–∫
                        columns = [col['name'] for col in inspector.get_columns(table)]
                        column_names = " ".join(columns).lower()

                        if any(word in column_names for word in
                               ['price', 'amount', 'customer', 'user', 'sale', 'order', 'date', 'id']):
                            business_ready_tables += 1
                except:
                    continue

            # –û—Ü–µ–Ω–∫–∞ SmartGPT –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            if len(tables) > 0:
                smartgpt_readiness += 30
            if business_ready_tables > 0:
                smartgpt_readiness += 40
            if total_rows > 1000:
                smartgpt_readiness += 30

            health_status = {
                "connection": True,
                "smartgpt_ready": smartgpt_readiness >= 70,
                "readiness_score": smartgpt_readiness,
                "total_tables": len(tables),
                "business_ready_tables": business_ready_tables,
                "total_rows": total_rows,
                "estimated_analysis_time": (
                    "–ë—ã—Å—Ç—Ä–æ (5-15 –º–∏–Ω)" if total_rows < 10000 else
                    "–°—Ä–µ–¥–Ω–µ (15-30 –º–∏–Ω)" if total_rows < 100000 else
                    "–î–æ–ª–≥–æ (30-60 –º–∏–Ω)"
                ),
                "recommended_analysis": (
                    "comprehensive" if smartgpt_readiness >= 90 else
                    "standard" if smartgpt_readiness >= 70 else
                    "quick"
                ),
                "smartgpt_features": [
                    "business_insights" if business_ready_tables > 0 else None,
                    "correlation_analysis" if business_ready_tables > 1 else None,
                    "trend_analysis" if total_rows > 100 else None
                ]
            }

            # –£–±–∏—Ä–∞–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è
            health_status["smartgpt_features"] = [f for f in health_status["smartgpt_features"] if f]

            return health_status

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {connection_id}: {e}")
        return {
            "connection": False,
            "smartgpt_ready": False,
            "readiness_score": 0,
            "error": str(e)
        }


@router.get("/system-stats")
def get_smartgpt_system_stats(
        current_user: models.User = Depends(auth.get_current_active_user)
):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã SmartGPT."""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ Celery
    try:
        i = celery_app.control.inspect()
        active_tasks = i.active()
        scheduled_tasks = i.scheduled()

        active_count = sum(len(tasks) for tasks in active_tasks.values()) if active_tasks else 0
        scheduled_count = sum(len(tasks) for tasks in scheduled_tasks.values()) if scheduled_tasks else 0

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º SmartGPT –∑–∞–¥–∞—á–∏
        smartgpt_active = 0
        if active_tasks:
            for worker, tasks in active_tasks.items():
                for task in tasks:
                    if any(keyword in task.get('name', '').lower()
                           for keyword in ['dataframe', 'smart', 'gpt']):
                        smartgpt_active += 1

    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Celery: {e}")
        active_count = 0
        scheduled_count = 0
        smartgpt_active = 0

    return {
        "smartgpt_version": "2.0",
        "smartgpt_enabled": True,
        "active_tasks": active_count,
        "active_smartgpt_tasks": smartgpt_active,
        "scheduled_tasks": scheduled_count,
        "user_id": current_user.id,

        "analysis_capabilities": {
            "dataframe_analysis": True,
            "gpt_business_insights": True,
            "correlation_analysis": True,
            "anomaly_detection": True,
            "trend_analysis": True,
            "predictive_analytics": True
        },

        "supported_analysis_types": ["quick", "standard", "comprehensive"],
        "max_questions_per_analysis": 25,
        "supported_databases": ["PostgreSQL", "MySQL", "SQLite", "SQL Server"],

        "performance_info": {
            "avg_analysis_time_minutes": {
                "quick": "5-10",
                "standard": "15-20",
                "comprehensive": "30-45"
            },
            "max_dataframe_size_mb": 2048,
            "max_tables_per_analysis": 20
        }
    }


# =============== –û–ë–†–ê–¢–ù–ê–Ø –°–í–Ø–ó–¨ ===============

@router.post("/reports/feedback/{report_id}")
def submit_report_feedback(
        report_id: int,
        rating: int,
        comment: Optional[str] = None,
        useful_sections: Optional[List[str]] = None,
        smartgpt_quality: Optional[int] = None,
        db: Session = Depends(database.get_db),
        current_user: models.User = Depends(auth.get_current_active_user)
):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ SmartGPT –æ—Ç—á–µ—Ç—É."""

    if rating < 1 or rating > 5:
        raise HTTPException(status_code=400, detail="–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5")

    if smartgpt_quality and (smartgpt_quality < 1 or smartgpt_quality > 5):
        raise HTTPException(status_code=400, detail="–û—Ü–µ–Ω–∫–∞ SmartGPT –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5")

    try:
        feedback_data = {
            "rating": rating,
            "comment": comment,
            "useful_sections": useful_sections or [],
            "smartgpt_quality": smartgpt_quality,
            "smartgpt_feedback": True
        }

        feedback_record = crud.create_report_feedback(
            db,
            report_id=report_id,
            user_id=current_user.id,
            feedback_data=feedback_data
        )

        logger.info(f"SmartGPT –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ–ª—É—á–µ–Ω–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞ {report_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.id}")
        return {"status": "success", "feedback_id": feedback_record.id}

    except ValueError as e:
        raise HTTPException(status_code=404, detail=str(e))


# =============== LEGACY –ü–û–î–î–ï–†–ñ–ö–ê ===============

@router.post("/reports/generate-advanced/{connection_id}", response_model=schemas.ReportInfo)
def generate_legacy_advanced_report(
        connection_id: int,
        max_questions: Optional[int] = 12,
        db: Session = Depends(database.get_db),
        current_user: models.User = Depends(auth.get_current_active_user)
):
    """Legacy —ç–Ω–¥–ø–æ–∏–Ω—Ç - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ SmartGPT –∞–Ω–∞–ª–∏–∑."""

    logger.warning(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ legacy —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ SmartGPT –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.id}")

    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π SmartGPT –∞–Ω–∞–ª–∏–∑
    return generate_smart_analytics_report(
        connection_id=connection_id,
        max_questions=max_questions,
        analysis_type="standard",
        enable_gpt=True,
        db=db,
        current_user=current_user
    )


logger.info("SmartGPT DataFrame Analytics Router –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω")
