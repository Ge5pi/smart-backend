import uuid
from typing import Dict, Any, Set, Tuple
import pandas as pd
import numpy as np
import io
from fastapi import APIRouter, Depends, Form, HTTPException
from sqlalchemy import create_engine, inspect
from sqlalchemy.engine import Inspector
from sqlalchemy.orm import Session
from openai import OpenAI
import logging
import json
import auth
import config
import crud
import database
import models
import schemas
from config import API_KEY

database_router = APIRouter(prefix="/analytics/database")
client = OpenAI(api_key=API_KEY)


def analyze_single_table(table_name: str, df: pd.DataFrame) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Å–∞–π—Ç—ã –∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏."""
    numeric_df = df.select_dtypes(include=np.number)
    corr = numeric_df.corr().replace({np.nan: None}).to_dict() if not numeric_df.empty else {}
    stats = df.describe(include='all').replace({np.nan: None}).to_json()

    prompt = (
        f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã '{table_name}'. "
        f"–í–æ—Ç –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}. "
        f"–í–æ—Ç –º–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π: {json.dumps(corr)}. "
        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –≤—ã—è–≤–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã, —Å–∫—Ä—ã—Ç—ã–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –∏ –∞–Ω–æ–º–∞–ª–∏–∏ –≤ –¥–∞–Ω–Ω—ã—Ö —ç—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã. "
        "–ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ –ø–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
    )

    response = client.chat.completions.create(
        model="gpt-4-turbo",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.4
    )
    insight = response.choices[0].message.content
    return {"insight": insight, "correlations": corr}


def analyze_joins(inspector: Inspector, dataframes: Dict[str, pd.DataFrame]) -> Dict[str, Any]:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏, –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    """
    joint_insights = {}
    analyzed_pairs: Set[Tuple[str, str]] = set()
    all_tables = list(dataframes.keys())

    for table_name in all_tables:
        try:
            foreign_keys = inspector.get_foreign_keys(table_name)
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
            continue

        for fk in foreign_keys:
            left_table = table_name
            right_table = fk['referred_table']

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–º–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è (user, post) –∏ (post, user)
            pair = tuple(sorted((left_table, right_table)))
            if pair in analyzed_pairs:
                continue

            analyzed_pairs.add(pair)

            df_left = dataframes[left_table]
            df_right = dataframes.get(right_table)

            if df_right is None:
                continue

            left_on = fk['constrained_columns']
            right_on = fk['referred_columns']

            try:
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—ã, –¥–æ–±–∞–≤–ª—è—è —Å—É—Ñ—Ñ–∏–∫—Å—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –∏–º–µ–Ω —Å—Ç–æ–ª–±—Ü–æ–≤
                merged_df = pd.merge(
                    df_left, df_right,
                    left_on=left_on,
                    right_on=right_on,
                    suffixes=(f'_{left_table}', f'_{right_table}')
                )

                if merged_df.empty:
                    continue

                join_key = f"{left_table} üîó {right_table}"

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π DataFrame
                analysis_result = analyze_single_table(join_key, merged_df)

                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT, —á—Ç–æ–±—ã –æ–Ω —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–ª—Å—è –Ω–∞ –º–µ–∂—Ç–∞–±–ª–∏—á–Ω—ã—Ö —Å–≤—è–∑—è—Ö
                stats = merged_df.describe(include='all').replace({np.nan: None}).to_json()
                corr = analysis_result["correlations"]

                prompt = (
                    f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –°–í–Ø–ó–¨ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏ '{left_table}' –∏ '{right_table}', –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –ø–æ –∫–ª—é—á–∞–º "
                    f"({left_table}.{','.join(left_on)} = {right_table}.{','.join(right_on)}). "
                    f"–í–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {stats}. "
                    f"–í–æ—Ç –º–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π: {json.dumps(corr)}. "
                    f"–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ –ø–æ–∏—Å–∫–µ –∏–Ω—Å–∞–π—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –∏–º–µ–Ω–Ω–æ –∏–∑-–∑–∞ —Å–≤—è–∑–∏ –¥–≤—É—Ö —Ç–∞–±–ª–∏—Ü. "
                    f"–ù–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç—ã –∏–∑ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤–ª–∏—è—é—Ç –Ω–∞ –∞—Ç—Ä–∏–±—É—Ç—ã –≤ –¥—Ä—É–≥–æ–π? "
                    "–û—Ç–≤–µ—Ç –¥–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."
                )

                response = client.chat.completions.create(
                    model="gpt-4-turbo",
                    messages=[{"role": "user", "content": prompt}],
                    temperature=0.5
                )

                analysis_result["insight"] = response.choices[0].message.content
                joint_insights[join_key] = analysis_result

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–∞–±–ª–∏—Ü {left_table} –∏ {right_table}: {e}")

    return joint_insights


async def perform_full_analysis(inspector: Inspector, dataframes: Dict[str, pd.DataFrame]) -> Dict[str, Any]:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑: –ø–æ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ –∏ –ø–æ –∏—Ö —Å–≤—è–∑—è–º."""

    # 1. –ê–Ω–∞–ª–∏–∑ –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Ç–∞–±–ª–∏—Ü–∞–º
    single_table_analysis = {}
    for table, df in dataframes.items():
        single_table_analysis[table] = analyze_single_table(table, df)

    # 2. –ê–Ω–∞–ª–∏–∑ –º–µ–∂—Ç–∞–±–ª–∏—á–Ω—ã—Ö —Å–≤—è–∑–µ–π
    joint_table_analysis = analyze_joins(inspector, dataframes)

    return {
        "single_table_insights": single_table_analysis,
        "joint_table_insights": joint_table_analysis
    }


async def generate_report(session_id: str, inspector: Inspector, dataframes: Dict[str, pd.DataFrame], user_id: int,
                          db: Session) -> int:
    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π, —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞
    analysis_results = await perform_full_analysis(inspector, dataframes)

    def clean_nan(obj):
        if isinstance(obj, dict):
            return {k: clean_nan(v) for k, v in obj.items()}
        elif isinstance(obj, list):
            return [clean_nan(item) for item in obj]
        elif isinstance(obj, float) and np.isnan(obj):
            return None
        return obj

    cleaned_results = clean_nan(analysis_results)
    report = models.Report(user_id=user_id, status="completed", results=cleaned_results)
    db.add(report)
    db.commit()
    db.refresh(report)
    logging.warning(f"–°–æ–∑–¥–∞–Ω –æ—Ç—á–µ—Ç —Å ID: {report.id}")
    return report.id


@database_router.post("/analyze")
async def analyze_database(
        connectionString: str = Form(...),
        dbType: str = Form(...),
        alias: str = Form(...),
        db: Session = Depends(database.get_db),
        current_user: models.User = Depends(auth.get_current_active_user)
):
    if dbType not in ['postgres', 'sqlserver']:
        raise HTTPException(status_code=400, detail="–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")

    crud.create_database_connection(db, user_id=current_user.id, connection_string=connectionString, db_type=dbType,
                                    alias=alias)

    engine = None
    try:
        engine = create_engine(connectionString)
        inspector = inspect(engine)

        tables = inspector.get_table_names()
        if not tables:
            raise HTTPException(status_code=404, detail="–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü.")

        dataframes = {}
        for table in tables:
            try:
                dataframes[table] = pd.read_sql_table(table, con=engine)
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É {table}: {e}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")

        if not dataframes:
            raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω—É —Ç–∞–±–ª–∏—Ü—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")

        session_id = str(uuid.uuid4())
        # –ü–µ—Ä–µ–¥–∞–µ–º inspector –∏ dataframes –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        report_id = await generate_report(session_id, inspector, dataframes, current_user.id, db)
        return {"report_id": report_id, "message": "–ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω."}

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
    finally:
        if engine:
            engine.dispose()


# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: get_user_connections, get_report_details) ...
# –ö–æ–ø–∏–ø–∞—Å—Ç –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –∏–∑ database_analytics.py
@database_router.get("/connections", response_model=list[schemas.DatabaseConnection])
async def get_user_connections(
        db: Session = Depends(database.get_db),
        current_user: models.User = Depends(auth.get_current_active_user)
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    return crud.get_database_connections_by_user_id(db, user_id=current_user.id)


@database_router.get("/reports/{report_id}")
async def get_report_details(
        report_id: int,
        db: Session = Depends(database.get_db),
        current_user: models.User = Depends(auth.get_current_active_user)
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –µ–≥–æ ID.
    """
    report = crud.get_report_by_id(db, report_id=report_id)

    if not report:
        raise HTTPException(status_code=404, detail="–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    if report.user_id != current_user.id:
        raise HTTPException(status_code=403, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–≥–æ –æ—Ç—á–µ—Ç–∞.")

    return report